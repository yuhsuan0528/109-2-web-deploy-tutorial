type Query {
	rooms: [Room]
	roomChat(roomName: String!): [Message]
	roomInfo(roomName: String!): Room
}

type Mutation {
	logIn(name: String!): String!
	createRoom(roomName: String!, hostName: String!, num: Int!): String!
	joinRoom(roomName: String!, playerName: String!): String!
	createMessage(roomName: String!, playerName: String!, body: String): Message!
	startGame(roomName: String!, playerName: String!): String!
	assign(roomName: String!, leaderName: String!, assignedNames: [String!]!): String!
	vote(roomName: String!, playerName: String!, agree: Boolean!): String!
	cup(roomName: String!, playerName: String!, agree: Boolean!): String!
	assassin(roomName: String!, playerName: String!, targetName: String!): String!
	leaveRoom(roomName: String!, playerName: String!): String!
	closeRoom(roomName: String!, playerName: String!): String!
}

type Subscription {
	room: RoomPayload!
	message(roomName: String!): MessagePayload!
	roomInfo(roomName: String!): RoomInfoPayload!
}

type Player {
	id: ID!
	name: String!
	room: Room
	is_leader: Boolean
	is_assigned: Boolean
	vote: String
	players_list: [PlayerInfo!]
}

type PlayerInfo {
	id: ID!
	name: String!
	me: Boolean!
	character: String!
}

type Room {
	id: ID!
	name: String!
	host: String!
	num_of_players: Int!
	status: String!
	players: [Player]
	messages: [Message]
	cup_results: [CupResult]
	vote_results: [VoteResult]
}

type CupResult {
	id: ID!
	good:Int!
	bad: Int!
	player: [Int!]!
}

type VoteResult {
	id: ID!
	vote: [String!]!
}

type Message {
	id: ID!
	sender: Player!
	body: String
}

type MessagePayload{
	data: Message!
}

type RoomPayload{
	data: [Room!]!
}

type RoomInfoPayload{
	data: Room!
}
